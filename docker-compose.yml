version: '3.8'

services:
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  core_service:
    build:
      context: ./core_service
      dockerfile: Dockerfile
    environment:
      - DEBUG=0
      - SECRET_KEY=${CORE_SECRET_KEY:-django-insecure-core-service-secret-key}
      - ALLOWED_HOSTS=*
      - DB_NAME=core_service_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=db
      - DB_PORT=5432
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - CORS_ALLOWED_ORIGINS=*
    volumes:
      - ./core_service:/app
      - static_volume:/app/static
      - media_volume:/app/media
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command: >
      sh -c "
      python manage.py migrate &&
      python manage.py collectstatic --noinput &&
      gunicorn core_service.wsgi:application --bind 0.0.0.0:8000 --workers 4 --threads 2
      "

  notification_service:
    build:
      context: ./notification_service
      dockerfile: Dockerfile
    environment:
      - DEBUG=0
      - SECRET_KEY=${NOTIFICATION_SECRET_KEY:-django-insecure-notification-service-secret-key}
      - ALLOWED_HOSTS=*
      - DB_NAME=notification_service_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=db
      - DB_PORT=5432
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - EMAIL_HOST=${EMAIL_HOST:-smtp.gmail.com}
      - EMAIL_PORT=${EMAIL_PORT:-587}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS:-True}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
    volumes:
      - ./notification_service:/app
    ports:
      - "8001:8001"
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command: >
      sh -c "
      python manage.py migrate &&
      gunicorn notification_service.wsgi:application --bind 0.0.0.0:8001 --workers 2 --threads 2
      "

  user_management_service:
    build:
      context: ./user_management_service
      dockerfile: Dockerfile
    environment:
      - DEBUG=0
      - SECRET_KEY=${USER_MANAGEMENT_SECRET_KEY:-django-insecure-user-management-secret-key}
      - ALLOWED_HOSTS=*
      - DB_NAME=user_management_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=db
      - DB_PORT=5432
      - EMAIL_HOST=${EMAIL_HOST:-smtp.gmail.com}
      - EMAIL_PORT=${EMAIL_PORT:-587}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS:-True}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-jwt-secret-key}
      - JWT_ACCESS_TOKEN_LIFETIME=${JWT_ACCESS_TOKEN_LIFETIME:-5}
      - JWT_REFRESH_TOKEN_LIFETIME=${JWT_REFRESH_TOKEN_LIFETIME:-1440}
      - CORS_ALLOWED_ORIGINS=*
    volumes:
      - ./user_management_service:/app
    ports:
      - "8002:8002"
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -c "
      python manage.py migrate &&
      gunicorn user_management.wsgi:application --bind 0.0.0.0:8002 --workers 2 --threads 2
      "

  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - static_volume:/static
      - media_volume:/media
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - core_service
      - notification_service
      - user_management_service

volumes:
  postgres_data:
  rabbitmq_data:
  static_volume:
  media_volume: